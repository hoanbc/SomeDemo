###Info
fullname: "demo"
project: hbc
env: prod

###Deployment
deployment:
  create: true
  replicaCount: 1
  strategy: RollingUpdate
  image:
    registry: quay.io
    repository: hoanbc_it/nginx-unprivileged
    pullPolicy: IfNotPresent
    version: cdb53540a18e862ac2cc89f10d9cc3cccaf7b2e83331dce05750812ead3d6a45
  imagePullSecrets: hbc-pull-sec
  resources:
    limits:
      cpu: 100m
      memory: 300Mi
    requests:
      cpu: 50m
      memory: 100Mi
  ports:
    name: "http-port"
    containerPort: 8080
    protocol: TCP
  livenessProbe:
    httpGet:
      path: "/"
      port: "http-port"
      httpHeaders:
      - name: readinessProbe
        value: readiness
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 5
    successThreshold: 1
    timeoutSeconds: 10
  readinessProbe:
    httpGet:
      path: "/"
      port: "http-port"
      httpHeaders:
      - name: livenessProbe
        value: liveness
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 5
    successThreshold: 1
    timeoutSeconds: 10
  env:
    - name: TZ
      value: Asia/Ho_Chi_Minh
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false 
    runAsNonRoot: true
    privileged: false

#HPA
hpa:
  autoscaling:
    create: true
    minReplicas: 1
    maxReplicas: 2
    memory:
      averageUtilization: 80
    cpu:
      averageUtilization: 80

###Service
service:
  create: true
  type: ClusterIP
  port: 8080
  protocol: TCP
  targetPort: 8080
  nameport: "http-port"
  sessionAffinity: None

###ServiceAccount
serviceAccount:
  create: true 

###Route
route:
  create: true
  annotations:
    #haproxy.router.openshift.io/timeout: 120000ms
    haproxy.router.openshift.io/set-forwarded-headers: append
    avp.kubernetes.io/path: "hbc-project/data/ssl"
  labels:
    type: "internal"
  host: "demo.devops.id.vn"
  path: "/"
  wildcardPolicy: None
  tls:
    enabled: true
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
    certificate: <hbc-project-cert>
    key: <hbc-project-key>
    caCertificate: <root-ca-private>
    destinationCACertificate: ""
  service:
    targetPort: "http-port"
    weight: 100
  alternateBackends: []

###Secret
secretpull:
  create: true
  pull: PGltYWdlUHVsbFNlY3JldHM+
  type: kubernetes.io/dockerconfigjson
  vault: "hbc-project/data/secrets" 

###Configmap
configmap:
  create: false

##SCC
scc:
  create: false
  
### Egress
egress:
  create: true
  name: 12-201
  ips: 10.200.12.201

###Network Policy
networkpolicy:
  create: true
  allowanyingress: false
  allowanyegress: false
  ingressRules:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: blackbox-exporter
          namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: openshift-monitoring
      ports:
        - protocol: TCP
          port: 8080
    - ports:
        - protocol: TCP
          port: 9537 
    - from:
        - podSelector:
            matchLabels:
              ingresscontroller.operator.openshift.io/deployment-ingresscontroller: external-ingress
          namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: openshift-ingress
      ports:
        - protocol: TCP
          port: 8080
  egressRules:
    - to:
        - podSelector:
            matchLabels:
              dns.operator.openshift.io/daemonset-dns: default
          namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: openshift-dns
      ports:
        - protocol: UDP
          port: 5353
        - protocol: TCP
          port: 5353
